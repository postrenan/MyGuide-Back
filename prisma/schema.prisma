generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  name       String
  username   String
  birthday   DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  favorites  Favorite[]
  reviews    Review[]
}

model Admin {
  id         Int       @id @default(autoincrement())
  name       String
  email      String
  password   String
  shopId     Int
  shop       Shop      @relation(fields: [shopId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Location {
  id         Int       @id @default(autoincrement())
  street     String
  number     Int
  city       String
  state      String
  country    String
  complement String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  shops      Shop[]
}

model Shop {
  id         Int       @id @default(autoincrement())
  name       String @unique
  description String
  locationId Int
  location   Location  @relation(fields: [locationId], references: [id])
  categoryId Int
  category   Category  @relation(fields: [categoryId], references: [id])
  price      String?
  products   Int?
  pics       Int?
  openTime   DateTime
  closeTime  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?  @updatedAt
  deletedAt  DateTime?
  admins     Admin[]
  favorites  Favorite[]
  reviews    Review[]

  Picture Picture[]
}

model Product {
  id         Int       @id @default(autoincrement())
  name       String
  description String
  price      Float
  images     Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  Picture Picture[]
}

model Favorite {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  shopId     Int
  shop       Shop      @relation(fields: [shopId], references: [id])
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
}

model Review {
  id         Int       @id @default(autoincrement())
  title      String
  description String
  picture    Int
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  shopId     Int
  shop       Shop      @relation(fields: [shopId], references: [id])
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String
  description String
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  shops      Shop[]
}

model Picture {
  id         Int       @id @default(autoincrement())
  image      Bytes
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  products   Product[]
  shops      Shop[]
}
